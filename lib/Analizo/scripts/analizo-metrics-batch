#!/usr/bin/perl

=head1 NAME

analizo-metrics-batch - processes several source code directories in batch,
running B<analizo metrics> for each and optionally consolidating the results in
a single data file.

=head1 USAGE

analizo metrics-batch [OPTIONS] [directory [directory ...]]

=head1 DESCRIPTION

B<analizo metrics-batch> is useful when you want to analyze several projects at
once, or several different versions of the same project. You pass a list of
directories in the command line and each one will be analyzed as a separate
project. If no directories are passed in the command line, all of the
subdirectories of the current directory will be analized.

For example, suppose you want to process 5 consecutive releases of
I<myproject>, from version 0.1.0 to 0.5.0.

=over

=item

First you unpack the release tarballs for those versions in a directory, say
/tmp/analysis:

  $ ls -1 /tmp/analysis
  myproject-0.1.0
  myproject-0.2.0
  myproject-0.3.0
  myproject-0.4.0
  myproject-0.5.0

=item

Then you change to that directory, and then run B<analizo metrics-batch>:

  $ cd /tmp/analysis
  $ analizo metrics-batch

=item

B<analizo metrics-batch> will collect the metrics
data in a single .csv file, that you can import in spreadsheet software or
statistical packages.

=back

=head1 OPTIONS

=over

=item --parallel N, -p N

Activates support for parallel processing, using I<N> concurrent worker
processes. Usually you will want N to be less than or equal to the number of
CPUs in your machine.

Note that analizo metrics extraction is a CPU-intensive process, so setting N
as the exacty number of CPUs you have may bring your machine to an unusable
state.

=item --help, -h

Displays manual page (which you are currently reading).

=item --output FILE, -o FILE

Write output to FILE. Default is to write to I<metrics.csv>.  That file can
then be opened in data analysis programs.

=item --quiet, -q

Supresses messages to standard output.

=back

=head1 COPYRIGHT AND AUTHORS

See B<analizo(1)>.

=cut

use strict;
use warnings;

use Analizo::Command;
use Pod::Usage;
use Getopt::Long;

my $__help          = undef;
my $__output        = 'metrics.csv';
my $__quiet         = undef;
my $__parallel      = undef;

GetOptions(
  'help|h'            => \$__help,
  'output|o=s'      => \$__output,
  'quiet|q'         => \$__quiet,
  'parallel|p=i' => \$__parallel,
) or exit(1);

if ($__help) {
  exec('analizo', 'doc', __FILE__)
}

use Analizo::Batch::Directories;
use Analizo::Batch::Output::CSV;

my $runner = undef;
if ($__parallel) {
  require Analizo::Batch::Runner::Parallel;
  $runner = new Analizo::Batch::Runner::Parallel($__parallel);
} else {
  require Analizo::Batch::Runner::Sequential;
  $runner = new Analizo::Batch::Runner::Sequential;
}

unless ($__quiet) {
  $runner->progress(
    sub {
      my ($job, $done, $total) = @_;
      printf("I: Processed %s.\n", $job->id);
    }
  );
}

my $batch = new Analizo::Batch::Directories(@ARGV);

my $output = new Analizo::Batch::Output::CSV;
$output->file($__output);

$runner->run($batch, $output);
