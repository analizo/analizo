#!/usr/bin/perl

=head1 NAME

analizo-metrics - analizo's metric reporting tool

=head1 SYNOPSIS

  analizo metrics [options] [<source-tree>]

=head1 DESCRIPTION

analizo metrics analyzes source code in I<source-tree> and produces a metrics
report. If I<source-tree> is ommitted, the current directory (I<.>) is assumed.

The produced report is written to the standard output, or to a file using the
I<--output> option, using the YAML format (see I<http://www.yaml.org/>)

analizo metrics is part of the analizo suite.

=head1 OPTIONS

=over

=item --extractor <extractor>

Define wich extractor method use to analise source code. Default is Doxyparse.

When using the Doxyparse extractor (default), all files matching the languages
supported by doxyparse are processed, unless I<--language> is used.

=item --help

Displays the manual page.

=item --list | -l

Displays metric list

=item <input>...

Tells analizo which source code directory(ies) you want to parse.

=item --output <file> | -o <file>

Writes the output to <file> instead of standard output.

=item --global-only | -g

Don't output the details about modules: only output global (project-wide) metrics.

=item --language <lang>

Process only filenames matching known extensions for the <I<lang>> programming
language. To see which languages are supported, pass B<--language list>.

=item --exclude <dirs> | -x <dirs>

Exclude <I<dirs>> (a colon-separated list of directories) from the analysis.
This is useful, for example, when you want to focus on production code and
exclude test code from the analysis. You could do that by passing something
like pass B<--exclude test>.

=back

=head1 OUTPUT FORMAT

The output is a stream of YAML documents. The first one presents metrics for
the project as a whole. The subsequent ones present per-module metrics, and thus
there will be as many of them as there are modules in your project.

=head1 COPYRIGHT AND AUTHORS

See analizo(1)

=cut

use strict;

use Analizo::Command;
use Analizo::Metrics;
use Analizo::Batch::Job::Directories;

use Pod::Usage;
use Getopt::Long;
my $__list        = undef;
my $__extractor   = undef;
my $__global_only = undef;
my $__output      = undef;
my $__help        = undef;
my $__language    = undef;
my $__exclude     = undef;

GetOptions(
  'list|l'        => \$__list,
  'extractor=s' => \$__extractor,
  'global-only' => \$__global_only,
  'output=s'    => \$__output,
  'language=s'  => \$__language,
  'help'        => \$__help,
  'exclude|x=s' => \$__exclude,
) or exit(1);

if ($__help) {
  exec('analizo', 'doc', __FILE__)
}

if($__list){
    my $metrics_handler = new Analizo::Metrics(model => new Analizo::Model);
    my %metrics = $metrics_handler->list_of_metrics();
    my %global_metrics = $metrics_handler->list_of_global_metrics();

    print "Global Metrics:\n";
    foreach my $key (sort keys %global_metrics){
        print "$key - $global_metrics{$key}\n";
    }

    print "\nModule Metrics:\n";
    foreach my $key (sort keys %metrics){
        print "$key - $metrics{$key}\n";
    }
    exit(0);
}

my @unreadable = grep { ! -r $_ || ! -e $_ } @ARGV;
if (@unreadable) {
  foreach my $file (@unreadable) {
    printf STDERR "%s: %s is not readable\n", 'analizo metrics', $file;
  }
  exit(2);
}

if(scalar(@ARGV) > 1){
  exec('analizo', 'doc', '--usage', __FILE__);
}
my $tree = $ARGV[0] || '.';

my $job = new Analizo::Batch::Job::Directories($tree);
$job->extractor($__extractor);
if ($__language) {
  require Analizo::LanguageFilter;
  if ($__language eq 'list') {
    my @language_list = Analizo::LanguageFilter->list;
    print "Languages:\n";
    $" = "\n";
    print "@language_list\n";
    exit 0;
  }
  my $language_filter = Analizo::LanguageFilter->new($__language);
  $job->filters($language_filter);
}
if ($__exclude) {
  my @excluded_directories = split(':', $__exclude);
  $job->exclude(@excluded_directories);
}

$job->execute();
my $metrics = $job->metrics;

if ($__output) {
  open STDOUT, '>', $__output or die($!);
}

if ($__global_only) {
  print $metrics->report_global_metrics_only;
}
else {
  print $metrics->report;
}
close STDOUT;

exit(0);

